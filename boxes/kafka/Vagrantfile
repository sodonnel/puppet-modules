# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  default_version = '3.0.0'
  version_string = ENV['KAFKA_VERSION']
  unless version_string
    warn "Using the default KAFKA_VERSION of #{default_version}"
    version_string = default_version
  end

  version_string =~ /^(s*)(\d+\.\d+\.\d+)_*(.*)$/i

  unless $2
    warn "Kafka Version #{$2} is not in the format [s]X.Y.Z[_id]"
    exit(1)
  end 
  kafka_version = $2
  vm_additional_name = $3

  secure_cluster = 'false'

  if $1.upcase == 'S'
    secure_cluster = 'true'
  end
  
  $script = <<SCRIPT
    echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain" > /etc/hosts
    echo "::1         localhost localhost.localdomain localhost6 localhost6.localdomain6" >> /etc/hosts
    echo "192.168.33.6  standalone"  >> /etc/hosts
SCRIPT

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  vm_name = "kafka_#{secure_cluster == 'true' ? 'secure_' : '' }#{kafka_version}#{!vm_additional_name.empty? ? '_'+vm_additional_name : ''}"
  puts "Operating on #{vm_name}"

  config.vm.define vm_name do |cm|
    cm.vm.box = "base-box-vb-5.2.0"
    cm.vm.network "private_network", ip: "192.168.33.6"
    cm.vm.network "forwarded_port", guest: 8888, host: 8888
    cm.vm.hostname = 'standalone'
    cm.vm.provider "virtualbox" do |vb|
      vb.name =   vm_name
      vb.memory = 2048
      vb.cpus   = 2
    end
    cm.vm.synced_folder "../..", "/puppet_modules"
    cm.vm.provision "shell", inline: $script
    cm.vm.provision "puppet" do |puppet|
      puppet.facter = {
        "kafka_version"     => kafka_version,
        "kafka_secure"      => secure_cluster
      }
      puppet.manifests_path   = "../../manifests"
      puppet.manifest_file    = "kafka.pp"
      puppet.module_path      = "../../modules"
      puppet.options          = "--verbose"
    end
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with CFEngine. CFEngine Community packages are
  # automatically installed. For example, configure the host as a
  # policy server and optionally a policy file to run:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.am_policy_hub = true
  #   # cf.run_file = "motd.cf"
  # end
  #
  # You can also configure and bootstrap a client to an existing
  # policy server:
  #
  # config.vm.provision "cfengine" do |cf|
  #   cf.policy_server_address = "10.0.2.15"
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file default.pp in the manifests_path directory.
  #
  # config.vm.provision "puppet" do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "default.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision "chef_solo" do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { mysql_password: "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision "chef_client" do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
