#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Starts a Kafka Server
#
# chkconfig: 345 86 14
# description: Kafka Server
#
### BEGIN INIT INFO
# Provides:          kafka-server-<%= @broker_id %>
# Short-Description: Kafka Server-<%= @broker_id %>
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:
# Should-Stop:
### END INIT INFO

. /lib/lsb/init-functions
BIGTOP_DEFAULTS_DIR=${BIGTOP_DEFAULTS_DIR-/etc/default}
[ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/hadoop ] && . ${BIGTOP_DEFAULTS_DIR}/hadoop
[ -n "${BIGTOP_DEFAULTS_DIR}" -a -r ${BIGTOP_DEFAULTS_DIR}/kafka-server ] && . ${BIGTOP_DEFAULTS_DIR}/kafka-server

# Autodetect JAVA_HOME if not defined
. /usr/lib/bigtop-utils/bigtop-detect-javahome

RETVAL_SUCCESS=0

STATUS_RUNNING=0
STATUS_DEAD=1
STATUS_DEAD_AND_LOCK=2
STATUS_NOT_RUNNING=3
STATUS_OTHER_ERROR=102


ERROR_PROGRAM_NOT_INSTALLED=5
ERROR_PROGRAM_NOT_CONFIGURED=6


RETVAL=0
SLEEP_TIME=5
PROC_NAME="java"

DAEMON="kafka-server<%= @broker_id %>"
DESC="Kafka Server <%= @broker_id %>"
EXEC_PATH="/usr/lib/kafka/bin/kafka-server-start.sh"
EXEC_DIR=""
SVC_USER="kafka"
DAEMON_FLAGS=""
CONF_DIR="/etc/kafka/conf"
PIDFILE="/var/run/kafka/kafka-server-<%= @broker_id %>.pid"
LOCKDIR="/var/lock/subsys"
LOCKFILE="$LOCKDIR/kafka-server-<%= @broker_id %>"
WORKING_DIR="/var/lib/kafka"

install -d -m 0755 -o kafka -g kafka /var/run/kafka 1>/dev/null 2>&1 || :
[ -d "$LOCKDIR" ] || install -d -m 0755 $LOCKDIR 1>/dev/null 2>&1 || :
start() {
    [ -x $EXE_FILE ] || exit $ERROR_PROGRAM_NOT_INSTALLED
    log_success_msg "Starting $DESC (${DAEMON}): "

    checkstatusofproc
    status=$?
    if [ "$status" -eq "$STATUS_RUNNING" ]; then
        log_success_msg "${DESC} is running"
        exit 0
    fi

    LOG_FILE=/var/log/kafka<%= @broker_id %>/${DAEMON}.out
    export LOG_DIR=`dirname $LOG_FILE`

    echo "Starting $desc (kafka-server): "

    if [ -z "$KAFKA_JAVA_OPTS" ]; then
      JAVA_OPTS="-Xmx512M -server  -Dlog4j.configuration=file:$CONF_DIR/log4j.properties"
    fi

    su -s /bin/bash $SVC_USER -c "nohup $EXEC_PATH $CONF_DIR/server<%= @broker_id %>.properties > $LOG_FILE 2>&1 < /dev/null & "'echo $! '"> $PIDFILE"	  
    sleep 3

    checkstatusofproc
    RETVAL=$?
    if [ $RETVAL -eq $STATUS_RUNNING ]; then
        touch $LOCKFILE
        log_success_msg "Starting $DESC (${DAEMON}): "
    else
        log_failure_msg "Failure to start $DESC (${DAEMON}). Return value: $RETVAL"
    fi
    return $RETVAL
}
stop() {

  checkstatusofproc
  if [ "$?" = "$STATUS_RUNNING" ] ; then
    if [ -f $PIDFILE ]; then
      PID=`cat $PIDFILE`
      if [ -n $PID ]; then
        kill -TERM $PID &>/dev/null
      fi
    fi
  RETVAL=$?
  else
    RETVAL=$RETVAL_SUCCESS
  fi

  if [ $RETVAL -eq $RETVAL_SUCCESS ]; then
     rm -f $LOCKFILE $PIDFILE
     log_success_msg "Stopped ${DESC}: "
  else
     log_failure_msg "Failed to stop ${DESC}. Return value: $RETVAL"
  fi
  return $RETVAL
}
restart() {
  stop
  start
}

checkstatusofproc(){
  pidofproc -p $PIDFILE $PROC_NAME > /dev/null
}

checkstatus(){
  checkstatusofproc
  status=$?

  case "$status" in
    $STATUS_RUNNING)
      log_success_msg "${DESC} is running"
      ;;
    $STATUS_DEAD)
      log_failure_msg "${DESC} is dead and pid file exists"
      ;;
    $STATUS_DEAD_AND_LOCK)
      log_failure_msg "${DESC} is dead and lock file exists"
      ;;
    $STATUS_NOT_RUNNING)
      log_failure_msg "${DESC} is not running"
      ;;
    *)
      log_failure_msg "${DESC} status is unknown"
      ;;
  esac
  return $status
}

condrestart(){
  [ -e $LOCKFILE ] && restart || :
}

check_for_root() {
  if [ $(id -ur) -ne 0 ]; then
    echo 'Error: root user required'
    echo
    exit 1
  fi
}

service() {
  case "$1" in
    start)
      check_for_root
      start
      ;;
    stop)
      check_for_root
      stop
      ;;
    status)
      checkstatus
      RETVAL=$?
      ;;
    restart)
      check_for_root
      restart
      ;;
    condrestart|try-restart)
      check_for_root
      condrestart
      ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|try-restart|condrestart}"
      exit 1
  esac
}

service "$@"

exit $RETVAL
